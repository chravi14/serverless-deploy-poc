name: deploy-workflow

on:
  workflow_dispatch:
    inputs:
      build:
        description: "Build Number"
        required: true
      environment:
        type: choice
        description: "Choose Environment"
        required: true
        options:
          - "dev"
          - "prod"

jobs:
  detect-changes:
    name: Deployment to specified environment
    runs-on: ubuntu-latest
    env:
      BUILD_NUMBER: ${{ github.event.inputs.build }}
      ENVIORNMENT: ${{ github.event.inputs.environment }}
      PACKAGE_PATH: s3://backend-deployment-artifacts/builds/${{ github.event.inputs.build }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Install serverless framework
        run: npm install -g serverless@3

      - name: Install packages in root folder
        run: |
          if [ -e yarn.lock ]; then
            yarn install --frozen-lockfile
          elif [ -e package-lock.json ]; then
            npm ci
          else
            npm i --also=dev
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: us-east-1

      - name: Serverless Authentication
        run: sls config credentials --provider aws --key ${{ env.AWS_ACCESS_KEY_ID }} --secret ${{ env.AWS_SECRET_ACCESS_KEY }}

      # - name: Get list of S3 folders
      #   id: modified-services
      #   run: |
      #     MODIFIED_SERVICES=$(aws s3 ls $PACKAGE_PATH/ --recursive | grep '/' | cut -d'/' -f3 | sort -u)
      #     echo "Modified services: ${MODIFIED_SERVICES[@]}"
      #     echo "::set-output name=services::${MODIFIED_SERVICES[@]}"

      - name: Deployment
        run: |
          # Parse the modified services from the previous step
          # MODIFIED_SERVICES=("${{ steps.modified-services.outputs.services }}")
          MODIFIED_SERVICES=$(aws s3 ls $PACKAGE_PATH/ --recursive | grep '/' | cut -d'/' -f3 | sort -u)
          echo "Modified services: ${MODIFIED_SERVICES[@]}"

          SERVICE_DEPENDENCIES=$(cat service-dependencies.json)

          # Initialize a set to keep track of deployed services and dependencies
          DEPLOYED=()

          deploy_service() {
              local service=$1
              local dependencies=($(jq -r --arg key "$service" '.[$key] | .[]' service-dependencies.json))
              # local dependencies=${SERVICE_DEPENDENCIES[$service]}
              
              for dependency in ${dependencies[@]}
              do
                  if [[ ! "${DEPLOYED[@]}" =~ "$dependency" ]] && [[ "${MODIFIED_SERVICES[@]}" =~ "$dependency" ]]
                  then
                      echo "$dependency is not deployed and is in modified list - so deploying it"
                      deploy_service $dependency
                      DEPLOYED+=("$dependency")
                  elif [[ "${DEPLOYED[@]}" =~ "$dependency" ]]
                  then
                      echo "$dependency is already deployed, so skipping"
                  else
                      echo "$dependency is not in modified services, so not deploying"
                  fi
              done

              
              if [[ ! "${DEPLOYED[@]}" =~ "$service" ]] && [[ "${MODIFIED_SERVICES[@]}" =~ "$service" ]]
              then
                  echo "Deploying service: $service"
                  cd $service
                  serverless deploy --stage $ENVIORNMENT --package $PACKAGE_PATH/$service --verbose
                  cd ../
                  DEPLOYED+=("$service")
              else
                  echo "$service already deployed or not in modified list"
              fi
          }

          for service in ${MODIFIED_SERVICES[@]}
          do
              echo "Initializing deploy for $service"
              deploy_service $service
          done
