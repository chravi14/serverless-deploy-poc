name: build-workflow

on:
  pull_request:
    branches:
      - dev
      - main

jobs:
  build:
    name: Job to build the modified services
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Get Changed files
        id: modified
        uses: tj-actions/changed-files@v35

      - name: Get Modified services
        id: modified-services
        run: |
          MODIFIED_SERVICES=()
          for file in ${{ steps.modified.outputs.all_changed_files }}
          do
            directory="$( echo $file | cut -d'/' -f1 -s )"
            if [[ "$directory" != ".github" && "$directory" != "" && "$directory" != "shared" ]]
            then
              if [[ ! "${MODIFIED_SERVICES[@]}" =~ "$directory" ]]
              then
                MODIFIED_SERVICES+=("$directory")
              fi
            fi
          done
          echo "Modified services: ${MODIFIED_SERVICES[@]}"
          echo "::set-output name=services::${MODIFIED_SERVICES[@]}"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 14

      - name: Set Github Secret token to download dependenices
        run: git config --global url."https://${{ secrets.GH_PAT }}@github.com/".insteadOf ssh://git@github.com/

      - name: Install serverless framework
        run: npm install -g serverless@3

      - name: Install dependencies in root folder
        run: |
          if [ -e yarn.lock ]; then
            yarn install --frozen-lockfile
          elif [ -e package-lock.json ]; then
            npm ci
          else
            npm i --also=dev
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Install dependencies in modified service folders
        run: |
          # List of folders in which you want to run npm install
          MODIFIED_SERVICES=("${{ steps.modified-services.outputs.services }}")
          for service in ${MODIFIED_SERVICES[@]}
          do
            echo "Installing packages in $service"
            cd $service && npm install
            cd ..
          done

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: us-east-1

      - name: Serverless Authentication
        run: sls config credentials --provider aws --key ${{ env.AWS_ACCESS_KEY_ID }} --secret ${{ env.AWS_SECRET_ACCESS_KEY }}

      - name: Build the application
        run: |
          # Parse the modified services from the previous step
          MODIFIED_SERVICES=("${{ steps.modified-services.outputs.services }}")
          echo "Modified services: ${MODIFIED_SERVICES[@]}"

          build() {
            local service=$1
            echo "Running build for $service"
            cd $service && npm run build
            echo "Switching back to root directory"
            cd ../
          }

          for service in ${MODIFIED_SERVICES[@]}
          do
              echo "Initializing deploy for $service"
              build $service
          done
