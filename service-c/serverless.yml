service: service-c
frameworkVersion: "3"

params:
  local:
    userPoolId: us-east-1_VGvg5GP3x
    clientId: 3ukik31ovm7aatqac89q93ir8h
  dev:
    userPoolId: us-east-1_tBnCURGtx
    clientId: 58tpt7dqqn93660cthubor8566

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1

functions:
  AuthorizerFunc:
    handler: handler.hello
    environment:
      userPoolId: ${param:userPoolId}
      clientId: ${param:clientId}
  # TestCembooAuthorizerEndpoint:
  #   handler: handler.testAuthorizerEndpoint
  #   events:
  #     - http:
  #         method: GET
  #         path: test
  #         authorizer:
  #           type: TOKEN
  #           name: AuthorizerFunc
  #           arn: !GetAtt AuthorizerFunc.Arn

resources:
  Resources:
    NewResource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-my-new-bucket-${self:provider.stage}

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users-tbl-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

  Outputs:
    ServiceCS3Bucket:
      Description: ServiceC S3 bucket
      Value: !Ref NewResource
      Export:
        Name: ServiceCS3Bucket-${self:provider.stage}
    ServiceCUsersTable:
      Description: ServiceC Users Table
      Value: !Ref UsersTable
      Export:
        Name: ServiceCUsersTable-${self:provider.stage}

plugins:
  - serverless-bundle
  - serverless-iam-roles-per-function
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-domain-manager

custom:
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
  customDomain:
    domainName: api-dev.ravilearnings.com
    basePath: "v1/service-c" # This will be prefixed to all routes
    stage: ${self:provider.stage}
    certificateName: api-dev.ravilearnings.com
    createRoute53Record: false
    endpointType: regional
  serverless-offline:
    httpPort: 8083
    lambdaPort: 3003
